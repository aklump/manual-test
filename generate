#!/usr/bin/env php
<?php

/**
 * @file
 *
 * This is the CLI controller for manual_test
 *
 * Options:
 * --configuration=<path to phpunit.xml or config.xml>
 * --tester=<name of tester>
 * --filter=<id or id substr> Only include those tests whose id contains.
 * --testsuite=<testsuite> Only include those tests in a given testsuite.
 * --output=<path to output pdf; defaults to "./suite.pdf">
 */

use AKlump\LoftLib\Bash\Color;
use AKlump\ManualTest\ManualTest;

define('ROOT', dirname(__FILE__));

try {
  require ROOT . '/includes/bootstrap.inc';

  $conf = [];
  $conf['base_url'] = getenv('TEST_BASE_URL');

  $path_to_config = $cli->getParam('configuration', ROOT . '/examples/config.xml');
  $config = simplexml_load_file($path_to_config);
  if (!isset($config->manualtests)) {
    throw new \RuntimeException("Bad syntax in configuration file; missing key \"manualtests\".  In " . realpath($path_to_config));
  }

  $config_dir = realpath(dirname($path_to_config));
  foreach ($config->manualtests->children() as $name => $node) {
    switch ($name) {
      case 'testsuite':
        foreach ($node as $suite) {
          $suite_name = strval($node->attributes()->name);
          $path = strval($suite);
          if (substr($suite, 0, 1) !== '/') {
            $path = $config_dir . '/' . $path;
          }
          $path && $conf['testsuites'][$suite_name][] = $path;
        }
        break;

      default:
        $conf[$name] = strval($node);
        break;
    }
  }

  if (empty($conf['testsuites'])) {
    throw new \RuntimeException("No 'testsuites' defined in your configuration file: " . realpath($path_to_config));
  }
  if (empty($conf['tester'])) {
    throw new \RuntimeException("Missing default tester name defined in your configuration file as 'tester': " . realpath($path_to_config));
  }

  $manual_test = new ManualTest(
    ROOT . '/templates/',
    ROOT . '/includes/',
    $conf['base_url'],
    $conf['title'],
    $cli->getParam('tester', $conf['tester']),
    $conf['testsuites']
  );

  // --filter is a case-insensitive contains filter.
  if (($filter = $cli->getParam('filter'))) {
    $manual_test->addFilter(function ($files) use ($filter) {
      return array_map(function ($item) {
        return $item['path'];
      }, array_filter($files, function ($item) use ($filter) {
        return strpos(strtolower($item['meta']['id']), strtolower($filter)) !== FALSE;
      }));
    });
  }

  // --testsuite is a case-insensitive match filter.
  if (($filter = $cli->getParam('testsuite'))) {
    $manual_test->addFilter(function ($files) use ($filter) {
      return array_map(function ($item) {
        return $item['path'];
      }, array_filter($files, function ($item) use ($filter) {
        return strcasecmp($item['meta']['test suite'], $filter) === 0;
      }));
    });
  }

  $save_to = $cli->getParam('output', $conf['output']);
  if (strtolower(pathinfo($save_to, PATHINFO_EXTENSION)) !== 'pdf') {
    $save_to .= '.pdf';
  }

  if ($cli->hasParam('html')) {
    $save_to .= '.html';
    file_put_contents($save_to, $manual_test->getCompiledHtml());
  }
  else {
    if (!$manual_test->saveCompiledPdfTo($save_to, TRUE)) {
      throw new \RuntimeException("Could not save: \"$save_to\", the file may already exist.");
    }
  }
}
catch (\Exception $exception) {
  echo Color::wrap('red', $exception->getMessage() . PHP_EOL);
  exit(1);
}

echo Color::wrap('green', 'Manual test suite saved to: ' . $save_to) . PHP_EOL;
exit(0);
